node {    

    def app     
    def appName='App1'
    def snapName=''
    def deployName = 'PROD-US'
    def exportFormat ='json'
    def fileNamePrefix ='exported_file_'
    def fullFileName="${appName}-${deployName}-${currentBuild.number}.${exportFormat}"
    def changeSetId=""
    def snapshotName=""

    stage('Clone repository') {               
        
        echo "checkout scm"
        checkout scm    
    }     
    
    // stage('Build image') {         
    //     snDevOpsStep()
    //     app = docker.build("santoshnrao/demo-training-studio")    
    // }     

    // stage('Test image') {           
    //     app.inside {            
            
    //         sh 'echo "Tests passed"'        
    //     }    
    // }     
    // stage('Push image') {
    //             sh 'ls -a'
    //             docker.withRegistry('https://registry.hub.docker.com', 'santoshnrao-dockerhub') {            
    //             app.push("${env.BUILD_NUMBER}")            
    //             app.push("latest")        
    //         }    
    //     }
    
    stage('Validate Configurtion file'){

        sh 'echo validating configuration file'
        changeSetId = snDevOpsConfigUpload(applicationName:"${appName}",target:'component',namePath:'paymentservice.v1.1', fileName:'paymentService', autoCommit:'true',autoValidate:'true',dataFormat:'json')
        echo "validation result $changeSetId"
        

    }

    step("Get snapshots created"){
        changeSetResults = snDevOpsConfigGetSnapshots(applicationName:"${appName}",deployableName:"${deployName}",changeSetId:"${changeSetId}")
        echo "ChangeSet Result : ${changeSetResults}"
    }

    stage('Publish the snapshot'){
        echo 'step to publish snapshot'
        publishSnapShotResult(applicationName:"${appName}",,deployableName:"${deployName}",snapshotName: "${snapshotName}")
    }

    stage("deploy to system") {
            
            sh ' echo deployment done'
        //sh "docker run -it --rm -d -p 80:80 --name web santoshnrao/demo-training-studio:${env.BUILD_NUMBER}"
        
//             withKubeConfig([credentialsId: 'santosh-devops-config-k8s']) {
//                         sh 'kubectl apply -f k8s/'
//                   }
        // kubernetesDeploy(kubeconfigId: 'devops-config-demo-1',               // REQUIRED

        //      configs: 'k8s/', // REQUIRED
        // )
       }
}
